using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;
using MuCell.View.OpenGL;
using MuCell.Controller;
using MuCell.Model;


namespace MuCell.View
{

    /// <summary>
    /// Generated by Microsoft Visual C# 2005 Express Edition 25-02-2008
    /// </summary>
    public partial class Analyser3DViewPanelUI : UserControl, IAnalyzer3DViewPanelUI
    {

        private SpatialViewState spatialViewState;
        private OpenGLCellPlacementPanel OpenGLPanelAnalyser;
        private Analyzer3DViewPanelController controller;
        private Simulation simRef;


        public Analyser3DViewPanelUI()
        {
            InitializeComponent();
        }


        #region IControllable<Analyzer3DViewPanelController> Members

        public void setController(Analyzer3DViewPanelController controller)
        {
            this.controller = controller;
        }

        #endregion



        /// <summary>
        /// Resize event to ensure that the OpenGl panel remains square.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void OpenGLPanelAnalyser_Resize(object sender, EventArgs e)
        {
           // OpenGLPanelAnalyser.Width = OpenGLPanelAnalyser.Height = Math.Min(OpenGLPanelAnalyser.Width, OpenGLPanelAnalyser.Height);
        }



        private bool mouseOverOpenGLPanel()
        {
            Point p = PointToClient(new Point(Cursor.Position.X, Cursor.Position.Y));
            float x1 = ((float)p.X - OpenGLPanelAnalyser.Location.X - OpenGLPanelAnalyser.Padding.Left) / OpenGLPanelAnalyser.GetWidth();
            float y1 = ((float)p.Y - OpenGLPanelAnalyser.Location.Y - OpenGLPanelAnalyser.Padding.Top) / OpenGLPanelAnalyser.GetHeight();
          

            if (x1 > 0 && x1 < 1 && y1 > 0 && y1 < 1)
            {
                return true;
            }

            return false;
        }


        void Analyser3DViewPanelUI_MouseWheel(object sender, MouseEventArgs e)
        {


            if (mouseOverOpenGLPanel())
            {
                // mouseOverView.Ang3D += 0.4f;


                if (e.Delta > 0)
                {
                    OpenGLPanelAnalyser.PanelViewState.ZoomIn();
        
                }
                if (e.Delta < 0)
                {
                    OpenGLPanelAnalyser.PanelViewState.ZoomOut();
             
                }

            }
        }

        private void Analyser3DViewPanelUI_VisibleChanged(object sender, EventArgs e)
        {
            if (this.Visible)
            {
                this.Focus();
            }
        }

        #region IAnalyzer3DViewPanelUI Members


        /// <summary>
        /// 
        /// </summary>
        /// <param name="sim"></param>
        public void setSimulation(Simulation sim)
        {
            
            spatialViewState = sim.Parameters.EnvironmentViewState;
            spatialViewState.SimParams = sim.Parameters;
            spatialViewState.InitialSimState = sim.Parameters.InitialState;
            spatialViewState.CurrentSimState = sim.GetCurrentState();
            OpenGLPanelAnalyser.SpatialViewState = spatialViewState;

            simRef = sim;


            OpenGLPanelAnalyser.Refresh();

            }
        /// <summary>
        /// Timer event
        /// </summary>
        public void timer1Tick()
        {
            if (simRef != null)
            {
                spatialViewState.CurrentSimState = simRef.GetCurrentState();
            }

            Simulation currentSim = controller.GetSelectedSimulation();
            if (currentSim != null)
            {
                controller.GetSelectedSimulation().Parameters.EnvironmentViewState.ThreeDAnalyzer.Ang3D += 0.3f;
            }

            this.OpenGLPanelAnalyser.timer1Tick();
            this.OpenGLPanelAnalyser.Refresh();

        }

        #endregion

        private void testButton1_Click(object sender, EventArgs e)
        {
            controller.GetSelectedSimulation().Parameters.EnvironmentViewState.ThreeDAnalyzer.BeginAnimationToNewCameraPos(CameraPosition.Front);
         

        }

        private void testButton2_Click(object sender, EventArgs e)
        {
            controller.GetSelectedSimulation().Parameters.EnvironmentViewState.ThreeDAnalyzer.BeginAnimationToNewCameraPos(CameraPosition.Top);
         
        }

        private void testButton3_Click(object sender, EventArgs e)
        {
            controller.GetSelectedSimulation().Parameters.EnvironmentViewState.ThreeDAnalyzer.BeginAnimationToNewCameraPos(CameraPosition.Corner);
      
        }

    }
}
