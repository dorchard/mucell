using System;
using System.Collections.Generic;
using System.Text;

using NUnit.Framework;
using MuCell.Model.SBML;
using MuCell.Model;

namespace UnitTests.Model
{
		
	[TestFixture] public class TestAggregateFunctions
	{
	
		// Results generated by the RK prototype
	    	double x1 = 2.4925037620179653d;
    		double y1 = 2.4999998753462540d;
    		double z1 = 2.4999625875143727d;
    		
    		private double s1 = 3.9800300165710008d;
		private double s2 = 0.2597598674319956d;
		
		private List<MuCell.Model.SBML.Model> models;
		
		/// <summary>
		/// Tests the use of aggregate/population functions for TimeSeries generation
		/// Note uses two celldefinitions
		/// One has species A, X, Y, Z
		/// The other has species s1, Y
		/// Thefeore reference to Y or group1.Y is ambiguous and covers both celldefs
		/// This is tested
		/// There is testing of interaction of these formulas with regular operations, so there 
		/// is some use of arithmetic as well to strength test the formulas
		/// </summary>
		
		[Test] public void TestCellDefinitions()
		{
			MuCell.Model.Experiment experiment = new MuCell.Model.Experiment("experiment1");
			MuCell.Model.Simulation simulation = new MuCell.Model.Simulation("simulation1");
			Setup(experiment, simulation);
        
        		// Check cell definitions
			AssertDouble.AreEqual(10, evaluate("celldef1", experiment, simulation));
			AssertDouble.AreEqual(20, evaluate("celldef2", experiment, simulation));
			
			AssertDouble.AreEqual(12.3, evaluate("celldef1+2.3", experiment, simulation));
			AssertDouble.AreEqual(11.0, evaluate("1.1*(celldef2/2.0)", experiment, simulation));
		}

        [Test]
        public void TestCellDefinitionsWithSpaces()
        {
            MuCell.Model.Experiment experiment = new MuCell.Model.Experiment("experiment1");
            MuCell.Model.Simulation simulation = new MuCell.Model.Simulation("simulation1");
            Setup(experiment, simulation);
            experiment.GetCellDefinition("celldef1").Name = "cell def1";

            // Check cell definitions
            AssertDouble.AreEqual(10, evaluate("cell_def1", experiment, simulation));
            AssertDouble.AreEqual(20, evaluate("celldef2", experiment, simulation));

            AssertDouble.AreEqual(12.3, evaluate("cell_def1+2.3", experiment, simulation));
            AssertDouble.AreEqual(11.0, evaluate("1.1*(celldef2/2.0)", experiment, simulation));
        }
		
		[Test] public void TestGroups()
		{
			MuCell.Model.Experiment experiment = new MuCell.Model.Experiment("experiment1");
			MuCell.Model.Simulation simulation = new MuCell.Model.Simulation("simulation1");
			Setup(experiment, simulation);
        		
			AssertDouble.AreEqual(10, evaluate("group1", experiment, simulation));
			AssertDouble.AreEqual(10, evaluate("group2", experiment, simulation));
			AssertDouble.AreEqual(22, evaluate("2.2*group3", experiment, simulation));
		}
		
		[Test] public void TestSpecies()
		{
			MuCell.Model.Experiment experiment = new MuCell.Model.Experiment("experiment1");
			MuCell.Model.Simulation simulation = new MuCell.Model.Simulation("simulation1");
			Setup(experiment, simulation);
        
        		// Species
			AssertDouble.AreEqual(1.0d*10d, evaluate("A", experiment, simulation));
			AssertDouble.AreEqual(x1*10d, evaluate("X", experiment, simulation));

			AssertDouble.AreEqual(y1*10d+s2*20d, evaluate("Y", experiment, simulation));
			AssertDouble.AreEqual(z1*10d, evaluate("Z", experiment, simulation));
			
			AssertDouble.AreEqual(s1*20d, evaluate("s1", experiment, simulation));
		}

        [Test]
        public void TestSpeciesWithSpaces()
        {
            MuCell.Model.Experiment experiment = new MuCell.Model.Experiment("experiment1");
            MuCell.Model.Simulation simulation = new MuCell.Model.Simulation("simulation1");
            Setup(experiment, simulation, "s1 species_protein");

            // Species
            AssertDouble.AreEqual(1.0d * 10d, evaluate("A", experiment, simulation));
            AssertDouble.AreEqual(x1 * 10d, evaluate("X", experiment, simulation));

            AssertDouble.AreEqual(y1 * 10d + s2 * 20d, evaluate("Y", experiment, simulation));
            AssertDouble.AreEqual(z1 * 10d, evaluate("Z", experiment, simulation));

            AssertDouble.AreEqual(s1 * 20d, evaluate("s1_species_protein", experiment, simulation));
        }
		
		[Test] public void TestCellDefAndSpecies()
		{
			MuCell.Model.Experiment experiment = new MuCell.Model.Experiment("experiment1");
			MuCell.Model.Simulation simulation = new MuCell.Model.Simulation("simulation1");
			Setup(experiment, simulation);
        
        		// cell def and Species
			AssertDouble.AreEqual(1.0d*10d, evaluate("celldef1.A", experiment, simulation));
			AssertDouble.AreEqual(x1*10d, evaluate("celldef1.X", experiment, simulation));
			AssertDouble.AreEqual(y1*10d, evaluate("celldef1.Y", experiment, simulation));
			AssertDouble.AreEqual(z1*10d, evaluate("celldef1.Z", experiment, simulation));
			AssertDouble.AreEqual(0, evaluate("celldef1.s1", experiment, simulation));
			
			AssertDouble.AreEqual(s1*20d, evaluate("celldef2.s1", experiment, simulation));
			AssertDouble.AreEqual(s2*20d, evaluate("celldef2.Y", experiment, simulation));
			AssertDouble.AreEqual(0, evaluate("celldef2.A", experiment, simulation));
			AssertDouble.AreEqual(0, evaluate("celldef2.X", experiment, simulation));
			AssertDouble.AreEqual(0, evaluate("celldef2.Z", experiment, simulation));
			
		}
		
		[Test] public void TestCellDefAndGroup()
		{
			MuCell.Model.Experiment experiment = new MuCell.Model.Experiment("experiment1");
			MuCell.Model.Simulation simulation = new MuCell.Model.Simulation("simulation1");
			Setup(experiment, simulation);
        
        		// cell def and group
        		// Groups
			AssertDouble.AreEqual(3, evaluate("celldef1.group1", experiment, simulation));
			AssertDouble.AreEqual(3, evaluate("celldef1.group2", experiment, simulation));
			AssertDouble.AreEqual(4, evaluate("celldef1.group3", experiment, simulation));
			AssertDouble.AreEqual(7, evaluate("celldef2.group1", experiment, simulation));
			AssertDouble.AreEqual(7, evaluate("celldef2.group2", experiment, simulation));
			AssertDouble.AreEqual(6, evaluate("celldef2.group3", experiment, simulation));
		}
		
		[Test] public void TestGroupAndSpecies()
		{
			MuCell.Model.Experiment experiment = new MuCell.Model.Experiment("experiment1");
			MuCell.Model.Simulation simulation = new MuCell.Model.Simulation("simulation1");
			Setup(experiment, simulation);
        
        		// group and Species
        		// 3 of celldef1 in group 1 and 2
			AssertDouble.AreEqual(1.0d*3d, evaluate("group1.A", experiment, simulation));
			AssertDouble.AreEqual(x1*3d, evaluate("group1.X", experiment, simulation));
			AssertDouble.AreEqual(y1*3d+s2*7d, evaluate("group1.Y", experiment, simulation));
			AssertDouble.AreEqual(z1*3d, evaluate("group1.Z", experiment, simulation));
			
			AssertDouble.AreEqual(1.0*3d*2d, evaluate("group1.A+group2.A", experiment, simulation));
			AssertDouble.AreEqual(x1*3d*2d, evaluate("group1.X+group2.X", experiment, simulation));
			AssertDouble.AreEqual(y1*3d*2d+s2*7d*2d, evaluate("group1.Y+group2.Y", experiment, simulation));
			AssertDouble.AreEqual(z1*3d*2d, evaluate("group1.Z+group2.Z", experiment, simulation));
			
			// 4 of celldef1 in group 3
			AssertDouble.AreEqual(1.0d*4d, evaluate("group3.A", experiment, simulation));
			AssertDouble.AreEqual(x1*4d, evaluate("group3.X", experiment, simulation));
			AssertDouble.AreEqual(y1*4d+s2*6d, evaluate("group3.Y", experiment, simulation));
			AssertDouble.AreEqual(z1*4d, evaluate("group3.Z", experiment, simulation));
			
			// 7 of celldef2 in group 1 and 2
			AssertDouble.AreEqual(s1*7d, evaluate("group1.s1", experiment, simulation));
			
			AssertDouble.AreEqual(s1*7d, evaluate("group2.s1", experiment, simulation));

			// 6 of celldef2 in group 3
			AssertDouble.AreEqual(s1*6d, evaluate("group3.s1", experiment, simulation));
		}
		
		[Test] public void TestCellDefAndGroupAndSpecies()
		{
			MuCell.Model.Experiment experiment = new MuCell.Model.Experiment("experiment1");
			MuCell.Model.Simulation simulation = new MuCell.Model.Simulation("simulation1");
			Setup(experiment, simulation);
        
        		// group and Species
        		// 3 of celldef1 in group 1 and 2
			AssertDouble.AreEqual(1.0d*3d, evaluate("celldef1.group1.A", experiment, simulation));
			AssertDouble.AreEqual(x1*3d, evaluate("celldef1.group1.X", experiment, simulation));
			AssertDouble.AreEqual(y1*3d, evaluate("celldef1.group1.Y", experiment, simulation));
			AssertDouble.AreEqual(z1*3d, evaluate("celldef1.group1.Z", experiment, simulation));
			
			AssertDouble.AreEqual(1.0d*3d*2d, evaluate("celldef1.group1.A+celldef1.group2.A", experiment, simulation));
			AssertDouble.AreEqual(x1*3d*2d, evaluate("celldef1.group1.X+celldef1.group2.X", experiment, simulation));
			AssertDouble.AreEqual(y1*3d*2d, evaluate("celldef1.group1.Y+celldef1.group2.Y", experiment, simulation));
			AssertDouble.AreEqual(z1*3d*2d, evaluate("celldef1.group1.Z+celldef1.group2.Z", experiment, simulation));
			
			// 4 of celldef1 in group 3
			AssertDouble.AreEqual(1.0d*4d, evaluate("celldef1.group3.A", experiment, simulation));
			AssertDouble.AreEqual(x1*4d, evaluate("celldef1.group3.X", experiment, simulation));
			AssertDouble.AreEqual(y1*4d, evaluate("celldef1.group3.Y", experiment, simulation));
			AssertDouble.AreEqual(z1*4d, evaluate("celldef1.group3.Z", experiment, simulation));
			
			// 7 of celldef2 in group 1 and 2
			AssertDouble.AreEqual(s1*7d, evaluate("celldef2.group1.s1", experiment, simulation));
			AssertDouble.AreEqual(s2*7d, evaluate("celldef2.group1.Y", experiment, simulation));
			
			AssertDouble.AreEqual(s1*7d, evaluate("celldef2.group2.s1", experiment, simulation));
			AssertDouble.AreEqual(s2*7d, evaluate("celldef2.group2.Y", experiment, simulation));

			// 6 of celldef2 in group 3
			AssertDouble.AreEqual(s1*6d, evaluate("celldef2.group3.s1", experiment, simulation));
			AssertDouble.AreEqual(s2*6d, evaluate("celldef2.group3.Y", experiment, simulation));
		}
		
		public double evaluate(string formula, MuCell.Model.Experiment experiment, MuCell.Model.Simulation simulation)
		{
			MuCell.Model.SBML.Reader.SBMLReader reader = new MuCell.Model.SBML.Reader.SBMLReader();
			FormulaParser fp = new FormulaParser(reader, formula, this.models, experiment, simulation);
            MathTree formulaTree = fp.getFormulaTree();
			MuCell.Model.AggregateEvaluationFunction fun1 = formulaTree.ToAggregateEvaluationFunction();
			return fun1(simulation.GetCurrentState());
		}

        public void Setup(Experiment experiment, Simulation simulation)
        {
            Setup(experiment, simulation, "s1");
        }
		
		public void Setup(Experiment experiment, Simulation simulation, string speciesName)
		{
			// ********* INITIAL SETUP
		
			// Hopf model
			MuCell.Model.SBML.Reader.SBMLReader s = new MuCell.Model.SBML.Reader.SBMLReader("../../UnitTests/smallest.Hopf.xml");
				
		
			// Cell definition 1
			MuCell.Model.CellDefinition celldef1 = new MuCell.Model.CellDefinition("celldef1");
			celldef1.addSBMLModel(s.model);

			// Create a NEW model 		
			MuCell.Model.SBML.Model model = new MuCell.Model.SBML.Model();
			MuCell.Model.SBML.Species species1 = new MuCell.Model.SBML.Species();
			MuCell.Model.SBML.Species species2 = new MuCell.Model.SBML.Species();
			
			model.listOfSpecies = new List<MuCell.Model.SBML.Species>();
			model.listOfSpecies.Add(species1);
			model.listOfSpecies.Add(species2);
			
			// Set some values for species1
            species1.ID = speciesName;
			species1.InitialAmount = 4.0d;
			
			// Set some values for species2
			species2.ID = "Y";
			species2.InitialAmount = 0.1d;
			
			model.AddId(speciesName, species1);
			model.AddId("Y", species2);
			
			// Set up the reaction
			MuCell.Model.SBML.Reaction reaction1 = new MuCell.Model.SBML.Reaction("reaction1");
			
			model.listOfReactions = new List<MuCell.Model.SBML.Reaction>();
			model.listOfReactions.Add(reaction1);
			
			// Set up the kinetic law
			reaction1.KineticLaw = new MuCell.Model.SBML.KineticLaw(model);
			reaction1.KineticLaw.Formula = speciesName.Replace(' ', '_')+"*2";
			
			// set up the species reference for the reactants
			MuCell.Model.SBML.SpeciesReference ref1 = new MuCell.Model.SBML.SpeciesReference(species1, 1);
			// set up the species references for the products
			MuCell.Model.SBML.SpeciesReference ref2 = new MuCell.Model.SBML.SpeciesReference(species1, 0.75);
			MuCell.Model.SBML.SpeciesReference ref3 = new MuCell.Model.SBML.SpeciesReference(species2, 2);
			
			// Add the references
			reaction1.Reactants.Add(ref1);
			reaction1.Products.Add(ref2);
			reaction1.Products.Add(ref3);
						
			// set up the cell definition
			MuCell.Model.CellDefinition celldef2 = new MuCell.Model.CellDefinition("celldef2");
			celldef2.addSBMLModel(model);
			
			// instantiat the environment
			MuCell.Model.Vector3 size = new MuCell.Model.Vector3(1, 1, 1);
			MuCell.Model.Environment environment = new MuCell.Model.Environment(size);
			
			// Cells
			List<MuCell.Model.CellInstance> cells = new List<MuCell.Model.CellInstance>();
			
			// Create 10 cells of celldef1 and 20 cells of celldef2
			for(int i=0;i<10;i++){
				int a = ((i+2)%3)+1;
				int b = (i%3)+1;
				int c = ((i+1)%3)+1;
				CellInstance cell11 = celldef1.createCell();
				cells.Add(cell11);
				environment.AddCellToGroup(a, cell11);
				
				CellInstance cell21 = celldef2.createCell();
				CellInstance cell22 = celldef2.createCell();
				cells.Add(cell21);
				cells.Add(cell22);
				environment.AddCellToGroup(b, cell21);
				environment.AddCellToGroup(c, cell22);
			}

			// StateSnapshot for intial state
			MuCell.Model.StateSnapshot initialState = new MuCell.Model.StateSnapshot(cells);
			initialState.SimulationEnvironment = environment;
		
			// Parameters
			MuCell.Model.SimulationParameters parameters = new MuCell.Model.SimulationParameters();
			parameters.InitialState = initialState;
			parameters.SimulationLength = 0.01001d;
			parameters.SnapshotInterval = 1;
			parameters.StepTime = 0.01001d;
			
			parameters.SolverMethod = MuCell.Model.Solver.SolverMethods.RungeKutta;
			
			// Simulation
			simulation.Parameters = parameters;
			
			// Experiment			
			experiment.addCellDefinition(celldef1);
			experiment.addCellDefinition(celldef2);
			experiment.addSimulation(simulation);
			
			// Start simulation
			simulation.StartSimulation();
		
			this.models = new List<MuCell.Model.SBML.Model>();
			this.models.Add(s.model);
			this.models.Add(model);
		}
	}
}
